{"ast":null,"code":"var _s2 = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\ynion\\\\Documents\\\\SnipcartNext\\\\pages\\\\product\\\\[id]\\\\index.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useRouter } from 'next/router';\n\nvar Pdp = function Pdp() {\n  _s2();\n\n  _s();\n\n  var router = useRouter();\n  var id = router.query.id;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Product: \", id]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, _this);\n};\n\n_s2(Pdp, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c2 = Pdp;\n\n_s(Pdp, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\n_c = Pdp;\nexport default Pdp;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pdp\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"Pdp\");","map":{"version":3,"sources":["C:/Users/ynion/Documents/SnipcartNext/pages/product/[id]/index.tsx"],"names":["Pdp","router","useRouter","id"],"mappings":";;;;;;;;AAAA,SAAA,SAAA,QAAA,aAAA;;AAEA,IAAMA,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA;;AAAA,EAAA,EAAA;;AAChB,MAAMC,MAAM,GAAGC,SAAf,EAAA;AADgB,MAERC,EAFQ,GAEDF,MAAM,CAFL,KAEDA,CAFC,EAAA;AAIhB,SAAA,aAAO,OAAA,CAAA,GAAA,EAAA;AAAA,IAAA,QAAA,EAAA,CAAA,WAAA,EAAA,EAAA;AAAA,GAAA,EAAA,KAAA,CAAA,EAAA,IAAA,EAAA;AAAA,IAAA,QAAA,EAAA,YAAA;AAAA,IAAA,UAAA,EAAA,CAAA;AAAA,IAAA,YAAA,EAAA;AAAA,GAAA,EAAP,KAAO,CAAP;AAJF,CAAA;;IAAMD,G;UACWE,S;;;MADXF,G;;GAAAA,G;UACWE,S;;;KADXF,G;AAON,eAAA,GAAA","sourcesContent":["import { useRouter } from 'next/router'\r\n\r\nconst Pdp = () => {\r\n  const router = useRouter()\r\n  const { id } = router.query\r\n\r\n  return <p>Product: {id}</p>\r\n}\r\n\r\nexport default Pdp"]},"metadata":{},"sourceType":"module"}